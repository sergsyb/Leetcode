---- 1949. Strong Friendship

------ Variant #1  union and intersect  -----------------------
select user1_id, user2_id from Friendship1949 f0
where 3 <= 
(
		select count (*)  cnt from 
		(	  (     select user1_id      ---- All friends for 1st collumn (user1_id  )
				from Friendship1949
				where user2_id =f0.user1_id  
				union
				select user2_id 
				from Friendship1949 
				where user1_id =f0.user1_id  and user2_id <> f0.user2_id  
			  )
				intersect  
		
			  (     select user1_id       ---- All friends for 2nd collumn (user2_id)
				from Friendship1949 
				where user2_id =f0.user2_id and  user1_id <> f0.user1_id  
				union
				select user2_id 
				from Friendship1949 
				where user1_id =f0.user2_id
			  )
		)t 
)
>>>>> Table 'Worktable'. Scan count 24,      logical reads 93
>>>>> Table 'Friendship1949'. Scan count 75, logical reads 115


------ Variant #2  with grouping -------------------------
with cte1 as (
	select user1_id, user2_id from Friendship1949 
	union   	--- Соединяем чтобы всегда всегда друг был слева, а его друзья справа
	select user2_id, user1_id from Friendship1949 
)

select user1_id, user2_id from Friendship1949 f
where exists 
(select * from 
	(
		select c1.user1_id user_1
		--,  c1.user2_id
		, c2.user1_id as user_2
		--, c2.user2_id user02 
		,  count(c2.user1_id) as common_friend
		from cte1 c1 join cte1 c2 
		on c1.user1_id < c2.user1_id		--- Перебираем все варианты для каждого искомого user1_id напр для 1 - 2,3,4 для 2 - 3,4 для 5 - 6,7,8 и т.д
		and c1.user2_id = c2.user2_id		--- общие друзья это равенство значений колонок user2_id 
		group by c1.user1_id, c2.user1_id	--- затем групировка c1.user1_id, c2.user1_id
		having count (c2.user1_id)>=3
		--order by 1,2
	) com_friends
	where f.user1_id=user_1 and f.user2_id=user_2
)

>>>>> Table 'Worktable'. Scan count 7, 	logical reads 108
>>>>> Table 'Friendship1949'. Scan count 8, 	logical reads 8


----- Varian #3  as 1 but with cte   -----------------------------
with cte1 as (
	select user1_id, user2_id from Friendship1949 
	union   --- Соединяем чтобы всегда всегда друг был слева, а его друзья справа
	select user2_id, user1_id from Friendship1949 
)

select user1_id, user2_id from Friendship1949 f0
where 3 <= 
(
select count (*)  cnt from 
		(	    select user2_id      ---- All friends for 1st collumn (user1_id  )
				from cte1
				where user1_id =f0.user1_id  and  user2_id<>f0.user2_id							  
				
				intersect  

			    select user1_id       ---- All friends for 2nd collumn (user2_id)
				from cte1 
				where user2_id =f0.user2_id and  user1_id <> f0.user1_id  			  
		)t 
)

>>>>> Table 'Worktable'. Scan count 24, logical reads 93
>>>>> Table 'Friendship1949'. Scan count 46, logical reads 55
------------------------------------------------------------------

create table Friendship1949
(user1_id int, user2_id int);

insert Friendship1949 values 
( 1  , 2 )  ,
( 1  , 3 )  ,
( 2  , 3 )  ,
( 1  , 4 )  ,
( 2  , 4 )  ,
( 1  , 5 )  ,
( 2  , 5 )  ,
( 1  , 7 )  ,
( 3  , 7 )  , 
( 1  , 6 )  ,
( 3  , 6 )  ,
( 2  , 6 )


----------------
